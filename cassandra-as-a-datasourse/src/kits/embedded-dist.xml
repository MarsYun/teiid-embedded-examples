<!--This script builds a zip for Embedded Installation -->
<assembly>

    <id>embedded-dist</id>

    <formats>
        <format>zip</format>
    </formats>

    <includeBaseDirectory>false</includeBaseDirectory>

    <fileSets>
        <fileSet>
            <directory>src/kits/embedded</directory>
            <outputDirectory>/examples</outputDirectory>
            <filtered>true</filtered>
            <includes>
                <include>**/*</include>
            </includes>
            <fileMode>755</fileMode>
        </fileSet>
        <fileSet>
            <directory>src/main/java</directory>
            <outputDirectory>/examples/cassandra-as-a-datasourse/src</outputDirectory>
        </fileSet>
    </fileSets>
    
    <files>
        <file>
            <source>${project.build.directory}/${project.artifactId}-${project.version}.jar</source>
            <outputDirectory>lib</outputDirectory>
        </file>
    </files>
    
    <dependencySets>
      <dependencySet>
          <includes>
          	  <include>org.jboss.teiid.connectors:translator-cassandra:jar</include>
          	  <include>org.jboss.teiid.connectors:connector-cassandra:jar:lib</include>
              <include>com.datastax.cassandra:cassandra-driver-core:jar</include>
              <include>com.google.guava:guava:jar</include>
              <include>com.codahale.metrics:metrics-core:jar</include>
          </includes>
          <outputDirectory>optional/cassandra</outputDirectory>
          <unpack>false</unpack>
       </dependencySet>
       
       <dependencySet>
          <includes>
              <include>org.slf4j:slf4j-api:jar</include>
          </includes>
          <outputDirectory>optional/slf4j</outputDirectory>
          <unpack>false</unpack>
          <useTransitiveDependencies>true</useTransitiveDependencies>
          <scope>provided</scope>
       </dependencySet>
       
       <dependencySet>
          <includes>
              <include>io.netty:netty:jar</include>
          </includes>
          <outputDirectory>optional/netty</outputDirectory>
          <unpack>false</unpack>
          <useTransitiveDependencies>true</useTransitiveDependencies>
          <scope>provided</scope>
       </dependencySet>
    </dependencySets>

    
 

</assembly>
